trigger:
  branches:
    include: ['master', 'azure-pipelines']
  tags:
    include: ['*']

variables:
  rust_test_threads: 1

jobs:
  - job: 'Clippy'
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    strategy:
      matrix:
        windows-stable:
          imageName: 'vs2017-win2016'
          rustup_toolchain: stable
        linux-stable:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: stable

    pool:
      vmImage: $(imageName)

    steps:
      - script: |
          sudo apt update
          sudo apt install -y libasound2-dev libudev-dev pkg-config
        displayName: Linux Install Dependencies
        condition: eq( variables['imageName'], 'ubuntu-16.04' )
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        displayName: Linux Install Rust
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        displayName: Windows Install Rust
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - script: rustup component add clippy
        displayName: Install Clippy
      - script: cargo clippy --all
        displayName: Run Clippy


  - job: 'Test'
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    strategy:
      matrix:
        windows-stable:
          imageName: 'vs2017-win2016'
          rustup_toolchain: stable
          target: 'x86_64-pc-windows-msvc'
        linux-stable:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: stable
          target: 'x86_64-unknown-linux-gnu'

    pool:
      vmImage: $(imageName)

    steps:
      - script: |
          sudo apt update
          sudo apt install -y libasound2-dev libudev-dev pkg-config
        displayName: Linux Install Dependencies
        condition: eq( variables['imageName'], 'ubuntu-16.04' )
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        displayName: Linux Install Rust
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        displayName: Windows Install Rust
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - script: cargo build --all
        displayName: Cargo Build
      - script: cargo test --all
        displayName: Cargo Test


  - job: 'Release'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    strategy:
      matrix:
        windows-stable:
          imageName: 'vs2017-win2016'
          rustup_toolchain: stable
          target: 'x86_64-pc-windows-msvc'
        linux-stable:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: stable
          target: 'x86_64-unknown-linux-gnu'

    pool:
      vmImage: $(imageName)

    steps:
      - bash: |
          DATE="$(date +%Y-%m-%d)"
          echo "##vso[task.setvariable variable=build.date]$DATE"
        displayName: "Create Date Variable"
      - bash: |
          MY_TAG="$(Build.SourceBranch)"
          MY_TAG=${MY_TAG#refs/tags/}
          echo $MY_TAG
          echo "##vso[task.setvariable variable=build.my_tag]$MY_TAG"
        displayName: "Create My Tag Variable"
      - script: |
          sudo apt update
          sudo apt install -y libasound2-dev libudev-dev pkg-config
        displayName: Linux Install Dependencies
        condition: eq( variables['imageName'], 'ubuntu-16.04' )
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        displayName: Linux Install Rust
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        displayName: Windows Install Rust
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - script: cargo build --release --all
        displayName: Cargo Build
      - script: cargo test --release --all
        displayName: Cargo Test

      - task: CopyFiles@2
        displayName: Linux Copy Assets
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/target/release'
          contents: |
            karaoke-rs
          targetFolder: '$(Build.BinariesDirectory)/karaoke-rs'
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - task: CopyFiles@2
        displayName: Windows Copy Assets
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/target/release'
          contents: |
            karaoke-rs.exe
          targetFolder: '$(Build.BinariesDirectory)/karaoke-rs'
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - task: CopyFiles@2
        displayName: Shared Copy Assets
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)'
          contents: |
            README.md
            LICENSE
            screenshots/**.*
          targetFolder: '$(Build.BinariesDirectory)/karaoke-rs'

      - task: ArchiveFiles@2
        displayName: Linux Gather Assets
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)/karaoke-rs'
          archiveType: 'tar'
          tarCompression: 'gz'
          archiveFile: '$(Build.ArtifactStagingDirectory)/karaoke-rs-$(build.my_tag)-$(TARGET).tar.gz'
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - task: ArchiveFiles@2
        displayName: Windows Gather Assets
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)/karaoke-rs'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/karaoke-rs-$(build.my_tag)-$(TARGET).zip'
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - task: GithubRelease@0
        condition: succeeded()
        inputs:
          gitHubConnection: 'tarkah'
          repositoryName: 'tarkah/karaoke-rs'
          action: 'edit'
          target: '$(build.sourceVersion)'
          tagSource: 'manual'
          tag: '$(build.my_tag)'
          assets: '$(Build.ArtifactStagingDirectory)/*'
          title: '$(build.my_tag) - $(build.date)'
          assetUploadMode: 'replace'
          addChangeLog: false